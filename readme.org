#+TITLE: [c]hecklist
#+OPTIONS: H:2 TOC:1 view:showall

A Haskell [c]hecklist. For starting off projects, starting over, or tidying up.

* Quick Start

Copy checklist.hsfiles to wherever you start a new project and, if you have stack, type:

#+begin_src zsh
stack new foo checklist
#+end_src

#+RESULTS:

If you do not have stack, then first type:

#+begin_src zsh
ghcup install stack
#+end_src

If you do not have ghcup, then first type:

#+begin_src zsh
curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | sh
#+end_src

** Features

The newly created project, ~foo~, should:

- Be fully conformant to both the stack and cabal ecosystems, and compile under either approach.
- Contain infrastructure for an executable, a library and testing.
- Be correctly set up for haskell-language-server integration.
- Pass hlint and ormolu checks.
- Quickly become a GitHub repository, with a nicely badged readme and continuous integration support using GitHub actions.
- Pass CI tests across linux, osx and windows.

* Deeper dive

This project contains everything I need to bootstrap a new project, from setting up a Haskell environment, through creation of a new project, to creating a new GitHub repository with CI support.

These are salad days for the happy Haskell hacker. ~ghcup~ is the single-onboarding parent and insists that its charges play nicely with each other. ~haskell-language-server~ usage is locked in and leveraging lsp development. Checkers like hlint, ormolu, stan and cabal-docspecs can be mixed in and matched as needed. At least in terms of *How we start*, Haskell has found it's groove, balancing the efficiency of a centralised onboarding experience with an ability to adapt to and adopt new ways, means and technologies as they arise.

The template may not, however, contain what you need. For small changes, a direct edit of the hsfiles template with the [[http://mustache.github.io/mustache.5.html][mustache]] manual open is fairly easy. For deeper dives, or if you'd like to contribute bug fixes or develop your own checklist, then keep reading!

* Usage and Overview

This file, =readme.org=, is an org-mode file used to develop the template. It contains the template components but also the commands used to bootstrap a new Haskell environment, and results from the various steps involved in getting together a working Haskell project.

To start from scratch, follow these steps:

1. Set up a Haskell environment following the [[#Haskell-and-Environs][Haskell and Environs]] section. This includes suggestions for Doom emacs but any of the emacs preludes will also be fine.
2. modify the [[#Templates][Templates]] and run org-babel-tangle ~C-c C-v t~
3. Place checklist.hsfiles where you want to create the new project and run ~stack new~ eg

  #+begin_src zsh
  stack new foo checklist
  #+end_src

  Current defaults are ghc-8.10.4, lts-18.6 and Lib as the library name, but they are easily changed using stack, eg

  #+begin_src zsh
  stack new foo checklist -p "ghc-version:9.0.1" -p "lib-name:Foo" -p "lib-name2:Bar" -p "resolver:nightly-2021-09-02"
  #+end_src

4. code, compile and test (perhaps referring to the [[#Checklist][Checklist]] section).
5. Create a GitHub repository and [[https://www.youtube.com/watch?v=vCadcBR95oU][push it]] (see the [[#GitHub][GitHub]] section for an example workflow).

The repo should look something like [[https://github.com/tonyday567/foo][this]].

* Environs

Setup of a modern Haskell environment is straight forward. [[https://www.haskell.org/ghcup/][ghcup]] takes care of ghc, cabal, stack, haskell-language-server and haddock executables. ~cabal~ or ~stack~ can then be used to install other tools.

** [[https://www.haskell.org/ghcup/][ghcup]]

#+begin_src zsh :results output
  curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | sh
#+end_src

=ghcup= places everything in ~/.ghcup/bin

#+begin_src zsh :results output :exports both
which cabal
#+end_src

#+RESULTS:
: /Users/tonyday/.ghcup/bin/cabal

*** Versioning

#+begin_src zsh :results output :exports both
cabal --version
#+end_src

#+RESULTS:
: cabal-install version 3.4.0.0
: compiled using version 3.4.0.0 of the Cabal library

#+begin_src zsh :results output :exports both
ghc --version
#+end_src

#+RESULTS:
: The Glorious Glasgow Haskell Compilation System, version 8.10.4

#+begin_src zsh :results output :exports both
stack --version
#+end_src

#+RESULTS:
: Version 2.7.3, Git revision 7927a3aec32e2b2e5e4fb5be76d0d50eddcc197f x86_64 hpack-0.34.4


~stack~ inspects the stack.yaml and selects a ghc that matches, so stack ghc and system (cabal) ghc can be different.

#+begin_src zsh :results output :exports both
stack exec -- which ghc
#+end_src

#+RESULTS:
: /Users/tonyday/.ghcup/ghc/8.10.4/bin/ghc

#+begin_src zsh :results output :exports both
which ghc
#+end_src

#+RESULTS:
: /Users/tonyday/.ghcup/bin/ghc

Note that haskell-language-server versions matching older GHC versions are also installed, and selected automatically.

#+begin_src zsh :results output :exports both
haskell-language-server --version
#+end_src

#+RESULTS:
: haskell-language-server version: 1.3.0.0 (GHC: 9.0.1) (PATH: /Users/tonyday/.ghcup/bin/haskell-language-server-9.0.1~1.3.0) (GIT hash: e7c5e90b6df5dff2760d76169eddaea3bdd6a831)

And all of this is packaged up by ghcup, eg

#+begin_src zsh :results output :text-properties t :exports both
ghcup list
#+end_src

#+RESULTS:
#+begin_example
   Tool  Version        Tags                      Notes
✗  ghc   7.10.3         base-4.8.2.0
✗  ghc   8.0.2          base-4.9.1.0
✗  ghc   8.2.2          base-4.10.1.0
✗  ghc   8.4.1          base-4.11.0.0
✗  ghc   8.4.2          base-4.11.1.0
✗  ghc   8.4.3          base-4.11.1.0
✗  ghc   8.4.4          base-4.11.1.0
✗  ghc   8.6.1          base-4.12.0.0
✗  ghc   8.6.2          base-4.12.0.0
✗  ghc   8.6.3          base-4.12.0.0
✗  ghc   8.6.4          base-4.12.0.0             hls-powered
✗  ghc   8.6.5          base-4.12.0.0             hls-powered
✗  ghc   8.8.1          base-4.13.0.0
✗  ghc   8.8.2          base-4.13.0.0
✗  ghc   8.8.3          base-4.13.0.0             hls-powered
✓  ghc   8.8.4          base-4.13.0.0             hls-powered
✗  ghc   8.10.1         base-4.14.0.0
✗  ghc   8.10.2         base-4.14.1.0             hls-powered
✗  ghc   8.10.3         base-4.14.1.0             hls-powered
✔✔ ghc   8.10.4         base-4.14.1.0             hls-powered
✗  ghc   8.10.5         base-4.14.2.0             hls-powered
✓  ghc   8.10.6         base-4.14.3.0
✗  ghc   8.10.7         recommended,base-4.14.3.0
✓  ghc   9.0.1          latest,base-4.15.0.0      hls-powered
✓  ghc   9.2.0.20210821 prerelease,base-4.16.0.0
✗  cabal 2.4.1.0
✗  cabal 3.0.0.0
✗  cabal 3.2.0.0
✔✔ cabal 3.4.0.0        latest,recommended
✓  hls   1.1.0
✓  hls   1.2.0
✔✔ hls   1.3.0          latest,recommended
✗  stack 2.5.1
✓  stack 2.7.1
✔✔ stack 2.7.3          latest,recommended
✔✔ ghcup 0.1.16.2       latest,recommended
#+end_example

** installing tools

- [[https://hackage.haskell.org/package/hlint][hlint]]
- [[https://hackage.haskell.org/package/ormolu][ormolu]]
- [[https://hackage.haskell.org/package/cabal-fmt][cabal-fmt]]
- [[https://hackage.haskell.org/package/hkgr][hkgr]]

For a deep dive into the cabal ecosystem: [[https://kowainik.github.io/projects/awesome-cabal][awesome-cabal]]

#+begin_src zsh
cabal install ormolu hlint ghcid cabal-fmt hkgr --allow-newer --overwrite-policy=always
#+end_src

~cabal~ stores executables in ​~​/.cabal/bin, ~stack~ in ​~​/.local/bin.

#+begin_src zsh :results output :exports both
which hlint
#+end_src

#+RESULTS:
: /Users/tonyday/.cabal/bin/hlint

** Haskell CI

GitHub actions is the current and common practice for continuous integration of projects. The [[https://github.com/haskell/actions/tree/main/setup#readme][haskell/action]] repo is the best place to find useful explanations.

Examples of non-trivial actions:
- [[https://github.com/haskell/haskell-language-server/tree/master/.github/workflows][haskell-language-server]]
- [[https://github.com/agda/agda/tree/master/.github/workflows][agda]]
- [[https://github.com/haskell/cabal/tree/master/.github/workflows][cabal]]

** cabal-extras

cabal-extras is a github repo that contains cabal-centric tools to help with builds and development. From these, I would recommend cabal-docspec and cabal-deps.

[[https://github.com/phadej/cabal-extras/blob/master/cabal-docspec/MANUAL.md][cabal-docspec]] is a doctest runner that exists as a process outside the specification of a cabal project, acting more like hlint then a separate cabal stanza.

#+begin_src zsh
git clone https://github.com/phadej/cabal-extras
cd cabal-extras/cabal-docspec
cabal install cabal-docspec:exe:cabal-docspec --overwrite-policy=always
#+end_src

** Doom emacs

Haskell setup for [[https://github.com/hlissner/doom-emacs#install][Doom]] emacs is straight-forward.

in ~.doom.d/init.el~, uncomment the haskell line and add lsp:

#+begin_src elisp
(haskell +lsp)      ; a language that's lazier than I am
#+end_src

in ~.doom.d/config.el~, place any personal config preferences. Mine are:

#+begin_src elisp
;; haskell
;;
(after! haskell
  (setq
   haskell-font-lock-symbols t
   lsp-enable-folding nil
   lsp-response-timeout 120
   company-idle-delay nil
   lsp-ui-sideline-enable nil           ; not anymore useful than flycheck
   lsp-ui-doc-enable nil                ; slow and redundant with K
   lsp-enable-symbol-highlighting nil
   ;; If an LSP server isn't present when I start a prog-mode buffer, you
   ;; don't need to tell me. I know. On some systems I don't care to have a
   ;; whole development environment for some ecosystems.
   +lsp-prompt-to-install-server 'quiet
   )
 )
#+end_src

* Templates
:PROPERTIES:
:header-args: :tangle checklist.hsfiles
:END:

I use org-mode to stitch together a .hsfiles for use with the ~stack new~ templating system, which uses the [[http://mustache.github.io/mustache.5.html][Mustache]] specification under the hood. Values such as GitHub-name tend to be picked up in the ~/.stack/config.yaml file.

It looks pretty noisy, but mustache is a simple system eg

#+begin_example
{{#lib-name}}{{lib-name}}{{#lib-name2}}.{{lib-name2}}{{/lib-name2}}{{/lib-name}}{{^lib-name}}Lib{{/lib-name}}
#+end_example

Parsing from left to right, if lib-name exists (#), then insert lib-name, if lib-name2 exists (#) then place a ~.~ and then insert lib-name2. If lib-name doesn't exist (^), then insert ~Lib~.

** readme.md

Practice varies widely, from saying nothing to all documentation being in the readme. The readme.md template:

- adds some badges for Hackage & CI.
- Includes a short description and basic Usage example, which in many cases should be exactly repeated in the cabal file as synopsis and description stanzas.

#+begin_src org :tangle checklist.hsfiles
{-# START_FILE readme.md #-}
{{name}}
===

[![Hackage](https://img.shields.io/hackage/v/{{name}}.svg)](https://hackage.haskell.org/package/{{name}})
[![Build Status](https://github.com/{{github-username}}/{{name}}/workflows/haskell-ci/badge.svg)](https://github.com/{{github-username}}/{{name}}/actions?query=workflow%3Ahaskell-ci)

`{{name}}` is a new package.

Usage
==

``` haskell
import {{#lib-name}}{{lib-name}}{{#lib-name2}}.{{lib-name2}}{{/lib-name2}}{{/lib-name}}{{^lib-name}}Lib{{/lib-name}}
```
#+end_src

** readme.org

an alterative readme.

#+begin_src org :tangle checklist.hsfiles
{-# START_FILE readme.org #-}

,* {{name}}

[[https://hackage.haskell.org/package/{{name}}][https://img.shields.io/hackage/v/{{name}}.svg]]
[[https://github.com/{{github-username}}/{{name}}/actions?query=workflow%3Ahaskell-ci][https://github.com/{{github-username}}/{{name}}/workflows/haskell-ci/badge.svg]]

~{{name}}~ is a new package.

,* Usage

,#+begin_src haskell :results output
import {{#lib-name}}{{lib-name}}{{#lib-name2}}.{{lib-name2}}{{/lib-name2}}{{/lib-name}}{{^lib-name}}Lib{{/lib-name}}
,#+end_src

,* Development

,#+begin_src haskell :results output
:set prompt "> "
:set -Wno-type-defaults
:set -Wno-name-shadowing
:set -XOverloadedStrings
,#+end_src

check

,#+begin_src haskell :results output :export both
let x = "ok"
putStrLn x
,#+end_src

#+end_src

** [[https://www.haskell.org/cabal/][cabal]]

~cabal~ [[https://cabal.readthedocs.io/en/3.4/][docs]] have gotten very good of late, and the template should be read with those docs handy.

*** front matter

#+begin_src org
{-# START_FILE {{name}}.cabal #-}
cabal-version: 2.4
name:          {{name}}
version:       0.0.1
synopsis: See readme.md
description: See readme.md for description.
category: project
author: {{author-name}}{{^author-name}}Author name here{{/author-name}}
maintainer: {{author-email}}
copyright: {{copyright}}{{^copyright}}{{year}}{{^year}}2021{{/year}} {{authorName}}{{^authorName}}Author name here{{/authorName}}{{/copyright}}
license: BSD-3-Clause
homepage: https://github.com/{{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}#readme
bug-reports: https://github.com/{{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}/issues
build-type: Simple
tested-with: GHC == {{#ghc-version}}{{ghc-version}}{{/ghc-version}}{{^ghc-version}}8.10.7{{/ghc-version}}
source-repository head
  type: git
  location: https://github.com/{{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}
#+end_src

*** common stanzas

~vrom911~ has a good [[https://vrom911.github.io/blog/common-stanzas][introduction]] to common stanzas.

#+begin_src org :tangle checklist.hsfiles
common common-options
  build-depends:
    base >=4.7 && <5
  default-language:
    Haskell2010

common ghc-options-stanza
  ghc-options:
    -Wall
    -Wcompat
    -Wincomplete-record-updates
    -Wincomplete-uni-patterns
    -Wredundant-constraints
    -fwrite-ide-info
    -hiedir=.hie
#+end_src

*** library stanza

#+begin_src org :tangle checklist.hsfiles
library
  import: common-options
  import: ghc-options-stanza
  hs-source-dirs:
    src
  default-extensions:
  build-depends:
  exposed-modules:
    {{#lib-name}}{{lib-name}}{{#lib-name2}}.{{lib-name2}}{{/lib-name2}}{{/lib-name}}{{^lib-name}}Lib{{/lib-name}}
#+end_src

*** executable stanza

#+begin_src org :tangle checklist.hsfiles
executable {{name}}
  import: common-options
  import: ghc-options-stanza
  main-is: app.hs
  hs-source-dirs: app
  build-depends:
    {{name}},
#+end_src

*** test stanza

I've left this test stanza in for completeness, but I'm tending to drop it altogether in preference to running cabal-docspec as a separate process to compilation.

#+begin_src org :tangle checklist.hsfiles
test-suite test
  import: common-options
  import: ghc-options-stanza
  type: exitcode-stdio-1.0
  main-is: test.hs
  hs-source-dirs:
    test
  build-depends:
    doctest >= 0.15 && < 0.19,
    {{name}}
#+end_src

*** cabal.project

I'm currently uncertain whether cabal.project should form part of the GitHub repo, as it doesn't form part of a Hackage distribution.

It does, however, form a place for things that might be needed down the track. ~allow-newer~ should be turned off before you get to uploading to haddock. GHC environment files are becoming pretty important.

#+begin_src org :tangle checklist.hsfiles
{-# START_FILE cabal.project #-}
packages: {{name}}.cabal

-- if doctests seem broken, uncomment:
-- See https://github.com/haskell/cabal/issues/6087
-- write-ghc-environment-files: always

allow-newer: true

-- Might be helpful when Hackage doesn't build properly...
-- keep-going: True
#+end_src

** library

#+begin_src org :tangle checklist.hsfiles
{-# START_FILE src/{{#lib-name}}{{lib-name}}{{#lib-name2}}/{{lib-name2}}{{/lib-name2}}{{/lib-name}}{{^lib-name}}Lib{{/lib-name}}.hs #-}
{-# OPTIONS_GHC -Wall #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

module {{#lib-name}}{{lib-name}}{{#lib-name2}}.{{lib-name2}}{{/lib-name2}}{{/lib-name}}{{^lib-name}}Lib{{/lib-name}}
  (
  )
where

import Prelude
#+end_src

** app

#+begin_src org :tangle checklist.hsfiles
{-# START_FILE app/app.hs #-}
{-# OPTIONS_GHC -Wall #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

import {{#lib-name}}{{lib-name}}{{#lib-name2}}.{{lib-name2}}{{/lib-name2}}{{/lib-name}}{{^lib-name}}Lib{{/lib-name}}
import Prelude

-- $setup
-- >>> import Prelude

-- | doctest
-- >>> putStrLn "doctest ok"
-- doctest ok
main :: IO ()
main = pure ()
#+end_src

Calling the file {{name}}.hs doesn't seem to work well, here, with the Name becoming capitalised somewhere.

** test

#+begin_src org :tangle checklist.hsfiles
{-# START_FILE test/test.hs #-}
{-# OPTIONS_GHC -Wall #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}

module Main where

import Test.DocTest
import Prelude

main :: IO ()
main =
  doctest
    [ "src/{{#lib-name}}{{lib-name}}{{#lib-name2}}/{{lib-name2}}{{/lib-name2}}{{/lib-name}}{{^lib-name}}Lib{{/lib-name}}.hs",
      "app/app.hs"
    ]
#+end_src

** stack

#+begin_src org :tangle checklist.hsfiles
{-# START_FILE stack.yaml #-}
resolver: {{#resolver}}{{resolver}}{{/resolver}}{{^resolver}}lts-18.23{{/resolver}}

packages:
  - .
#+end_src

** git

The .gitignore reflects a slow expansion of cruft as tools accumulate.

Everyone uses .hie these days which is some form of cache for ghc, used especially by hls.

.gitattributes can help if your project is mis-labelled in GitHub due to excessive HTML or whatnot being included in the project.

#+begin_src org :tangle checklist.hsfiles
{-# START_FILE .gitignore #-}
/.stack-work/
/dist-newstyle/
stack.yaml.lock
,**/.DS_Store
cabal.project.local*
/.hie/
.ghc.environment.*
/.hkgr/
#+end_src

#+begin_src org :tangle checklist.hsfiles
{-# START_FILE .gitattributes #-}
other/* linguist-documentation
#+end_src

** hls

In emacs, haskell-language-server uses projectile to discover the project root directory, which is indicated by an empty ~.projectile~ file.

#+begin_src org :tangle checklist.hsfiles
{-# START_FILE .projectile #-}
#+end_src

~hls~ uses the presence of a ~stack.yaml~ file as an indication that stack should be used, and the creation of this file hard-codes cabal as the preferred compilation tool.

#+begin_src org :tangle checklist.hsfiles
{-# START_FILE hie.yaml #-}
cradle:
  cabal:
    - path: "./app/{{name}}.hs"
      component: "{{name}}:exe:{{name}}"
    - path: "./src"
      component: "{{name}}:lib"
    - path: "./test/{{name}}.hs"
      component: "{{name}}:test:{{name}}"
#+end_src

** licence

Hard-coded BSD3.

#+begin_src org :tangle checklist.hsfiles
{-# START_FILE LICENSE #-}
Copyright {{author-name}}{{^author-name}}Author name here{{/author-name}} (c) {{year}}{{^year}}2021{{/year}}

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above
      copyright notice, this list of conditions and the following
      disclaimer in the documentation and/or other materials provided
      with the distribution.

    * Neither the name of {{author-name}}{{^author-name}}Author name here{{/author-name}} nor the names of other
      contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#+end_src

** action

Note that github/actions use double curly brackets, and the usual mustache delimiters are easily modified to adjust to this.

[[https://docs.github.com/en/actions][GitHub Actions Documentation - GitHub Docs]]

#+begin_src org :tangle checklist.hsfiles
{-# START_FILE .github/workflows/Haskell-CI.yml #-}
{{=>> <<=}}
on: [push]
name: haskell-ci
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        ghc: ['8.8.4', '8.10.7', '9.2.1']
        os: [ubuntu-latest]
        manager: ['cabal']
        docspec: [false]
        experimental: [false]
        include:
          - os: windows-latest
            ghc: '8.10.7'
            experimental: true
            manager: 'cabal'
          - os: macOS-latest
            ghc: '8.10.7'
            experimental: true
            manager: 'cabal'
          - os: ubuntu-latest
            ghc: '8.10.7'
            experimental: true
            manager: 'stack'
          - os: ubuntu-latest
            ghc: '8.10.7'
            experimental: true
            manager: 'cabal'
            docspec: true
    continue-on-error: true
    name: ghc ${{ matrix.ghc }} ${{ matrix.os }} ${{ matrix.manager }}
    steps:
      - name: clone project
        uses: actions/checkout@v2
      - name: setup stanza
        uses: haskell/actions/setup@v1
        with:
          ghc-version: ${{ matrix.ghc }}
          enable-stack: ${{ matrix.manager == 'stack' }}
          stack-version: 'latest'
      - name: cabal cache
        if: (matrix.manager == 'cabal')
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-${{ matrix.ghc }}-${{ github.sha }}
          path: ~/.cabal/store
          restore-keys: ${{ runner.os }}-${{ matrix.ghc }}-
      - if: matrix.docspec
        name: install cabal-docspec
        run: |
          mkdir -p $HOME/.cabal/bin
          echo "$HOME/.cabal/bin" >> $GITHUB_PATH
          curl -sL https://github.com/phadej/cabal-extras/releases/download/cabal-docspec-0.0.0.20210111/cabal-docspec-0.0.0.20210111.xz > cabal-docspec.xz
          echo '0829bd034fba901cbcfe491d98ed8b28fd54f9cb5c91fa8e1ac62dc4413c9562  cabal-docspec.xz' | sha256sum -c -
          xz -d < cabal-docspec.xz > $HOME/.cabal/bin/cabal-docspec
          rm -f cabal-docspec.xz
          chmod a+x $HOME/.cabal/bin/cabal-docspec
          $HOME/.cabal/bin/cabal-docspec --version
      - name: cabal build
        if: (matrix.manager == 'cabal')
        run: |
          cabal update
          cabal configure --enable-tests
          cabal build
          cabal test
      - name: stack cache
        if: (matrix.manager == 'stack')
        uses: actions/cache@v1
        with:
          path: ~/.stack
          key: ${{ runner.os }}-${{ hashFiles('stack.yaml') }}
          restore-keys: ${{ runner.os }}-
      - name: stack build
        if: (matrix.manager == 'stack')
        run: |
          stack update
          stack build --test --no-install-ghc --system-ghc
      - if: matrix.docspec
        name: run cabal-docspec
        run: cabal-docspec
    >>={{ }}=<<
    #+end_src

If you would like to go full heavy-metal, such as include hlint and cabal-docspecs, haskell-ci is a very good tool, though it doesn't (yet) support stack or windows CI.

* Checklist
:PROPERTIES:
:header-args: :dir ./foo
:END:

I use this section to record results of compilation steps, and the process of polishing projects. Edit properties in [[#Checklist][Checklist]] to point to the right directory and check/set the correct ghc version.

#+begin_src zsh
ghcup set ghc 8.10.7
#+end_src

#+RESULTS:

** Compiling
*** [[https://www.haskell.org/cabal/][cabal]]


  #+begin_src sh
  cabal clean
  #+end_src

  #+RESULTS:

  It's so very useful to check the build plan before actually building, as ~cabal configure~ does.

  #+begin_src sh :results output :exports both
  cabal configure --enable-tests
  #+end_src

  #+RESULTS:
  : 'cabal.project.local' already exists, backing it up to
  : 'cabal.project.local~7'.
  : Build profile: -w ghc-8.10.4 -O1
  : In order, the following would be built (use -v for more details):
  :  - doctest-0.18.1 (exe:doctest) (requires build)

  #+begin_src sh :results output :exports both
  cabal build --ghc-options=-freverse-errors
  #+end_src

  #+RESULTS:
  : Build profile: -w ghc-8.10.4 -O1
  : In order, the following will be built (use -v for more details):
  :  - foo-0.0.1 (test:test) (additional components to build)
  : Preprocessing test suite 'test' for foo-0.0.1..
  : Building test suite 'test' for foo-0.0.1..

  #+begin_src zsh :results output :exports both
  cabal test
  #+end_src

  #+RESULTS:
  #+begin_example
  Build profile: -w ghc-8.10.4 -O1
  In order, the following will be built (use -v for more details):
   - foo-0.0.1 (test:test) (ephemeral targets)
  Preprocessing test suite 'test' for foo-0.0.1..
  Building test suite 'test' for foo-0.0.1..
  Running 1 test suites...
  Test suite test: RUNNING...
  Test suite test: PASS
  Test suite logged to:
  /Users/tonyday/haskell/checklist/foo/dist-newstyle/build/x86_64-osx/ghc-8.10.4/foo-0.0.1/t/test/test/foo-0.0.1-test.log
  1 of 1 test suites (1 of 1 test cases) passed.
  #+end_example

*** [[https://docs.haskellstack.org/en/stable/README/][stack]]

Same compilation as above using stack.

  #+begin_src zsh :results output
    stack clean && stack build --test
  #+end_src

  A full -Werror compile + haddock check.

  #+begin_src zsh :results output
    stack build --test --haddock --no-haddock-deps --ghc-options -Werror --ghc-options -Wcompat --ghc-options -Wincomplete-record-updates --ghc-options -Wincomplete-uni-patterns --ghc-options -Wredundant-constraints
  #+end_src

*** compilation loops

  =haskell-language-server= works well for code that has recently compiled, but tends to suffer when fed projects that are less than pristine already. To bootstrap from a mess of garbage like I usually do, use =ghcid= and, when this falls over, revert to =stack build --test --file-watch= which will never fail.

** Linting
*** [[https://hackage.haskell.org/package/hlint][hlint]]
  #+begin_src zsh :results output :exports both
  hlint .
  #+end_src

  #+RESULTS:
  : No hints

*** [[https://hackage.haskell.org/package/ormolu][ormolu]]

  (~--mode inplace~ to actually change haskell files)

  #+begin_src sh :results output
  ormolu --mode check $(git ls-files '*.hs')
  #+end_src

  #+begin_src sh :results output
  ormolu --mode check */*.hs
  #+end_src

  #+RESULTS:

*** build linting

Consistent format for cabal files. ~--inplace~ edits

#+begin_src zsh
cabal-fmt --check foo.cabal
#+end_src

Check for unused dependencies

#+begin_src zsh
cabal build --ghc-options=-Wunused-packages
#+end_src

** Analysis

*** dependencies

Get suggestions for better upper bounds:

#+begin_src zsh
cabal gen-bounds
#+end_src

*** [[https://hackage.haskell.org/package/haddock][haddock]]

  I love Haddocks. They can be stunningly beautiful and are equipped to handle the idiosyncrasies of Haskell.

  And here's a nice [[https://kowainik.github.io/posts/haddock-tips][post]] from kowainik explaining the details.

  In particular, the ~--enable-documentation~ option creates a complete local haddock of all your dependencies.

  #+begin_src zsh :results output :exports both
  cabal haddock --enable-documentation
  #+end_src

  Or you can open a single dependency with

  #+begin_src sh
  stack haddock --open xyzzy
  #+end_src

*** hoogle

Create a local hoogle database.

#+begin_src zsh
  cabal haddock -hoogle --enable-documentation
#+end_src

... which may be equivalent to ...

#+begin_src zsh
hoogle generate
#+end_src

*** [[https://hackage.haskell.org][Hackage]]

#+begin_src zsh
cabal check
#+end_src

#+RESULTS:
: No errors or warnings could be found in the package.

#+begin_src zsh :results output
cabal sdist
#+end_src

#+RESULTS:
: Wrote tarball sdist to
: /Users/tonyday/haskell/checklist/foo/dist-newstyle/sdist/foo-0.0.1.tar.gz

Hackage configuration for username and such is in ~/.cabal/config

#+begin_src zsh :results output
cabal upload dist-newstyle/sdist/foo-0.0.1.tar.gz
#+end_src

This provides a preview. Check it out and then:

#+begin_src zsh :results output
cabal upload --publish
#+end_src

Alternatively, [[https://hackage.haskell.org/package/hkgr][hkgr]] is a command line tool that adds a ~git tag~ to this workflow, which is something I always forget to do.

#+begin_src zsh
hkgr disttag
hkgr upload
hkgr publish
#+end_src

Sometimes haddocks don't build on Hackage. Here's a recipe for uploading your own docs.

#+begin_src zsh
  cabal haddock --builddir=docs --haddock-for-hackage --enable-doc
  cabal upload -d --publish docs/*-docs.tar.gz
#+end_src

** GitHub

*** repo creation

Finally, this recipe can be used to push the newly minted package to github. Use with caution!

#+begin_src zsh results: output
cd foo
git init
git add .gitignore
git add **
git add .**
git commit -m "new project - forced automated commit"
git remote add origin https://github.com/tonyday567/foo.git
git push origin main --force
#+end_src

#+RESULTS:
: Reinitialized existing Git repository in /Users/tonyday/haskell/checklist/foo/.git/
: On branch main
: nothing to commit, working tree clean

*** decolonialisation

#+begin_src zsh
git branch -m master main && git push -u origin main && git symbolic-ref refs/remotes/origin/HEAD refs/remotes/origin/main
#+end_src

Change the default branch on GitHub to main (as all branches are still not equal, right?). See [[https://docs.github.com/en/github/administering-a-repository/setting-the-default-branch][setting a default branch]].

#+begin_src zsh
git push origin --delete master
#+end_src

* org-mode haskell (babel)
** setup

The [[https://orgmode.org/worg/org-contrib/babel/][babel]] functionality in org-mode is very old, and hasn't kept up with changes in haskell-mode practices. In particular, it uses the old haskell inferior mode to invoke ghci rather than the more modern haskell process methods. This could make it a touch fragile as it won't pick up standard configurations.

Using org-mode is particularly helpful in development loops where rebooting ghci requires a large amount of state. A complex function, say, with intermediate results can be laid out using org-mode and state-of-debugging sessions can evolve and be remembered between sessions.

It also works well as an alternative readme, with no gap between code blocks as basic tests and code blocks as usage documentation.

The babel functionality, ob-haskell, creates an ~inf-haskell~ buffer which is not the modern Haskell repl. The prompt has to end with a '>'.

#+begin_src haskell
:set -XOverloadedStrings
:set -Wno-type-defaults
:set prompt "> "
putStrLn "ok"
#+end_src

#+RESULTS:
: > > ok

A code block with multiple lines that doesn't return any output emits a benign warning: ~org-babel-script-escape expects a string~

** single session

Once a haskell code block is evaluated (eg ~C-c C-c~ in the above block), you can check in the ~*haskell*~ buffer to see input and output.

#+begin_src haskell
x = [0..4]
x
#+end_src

#+RESULTS:
| 0 | 1 | 2 | 3 | 4 |

babel feeds the code block in as single lines, returns the final computation as a result, and then tries to do some post-result format massaging, like putting the result into a table.

~:results output~ in the header of the block provides the raw output as you would expect from ghci.

#+begin_src haskell :results output
x = [0..4]
x
#+end_src

#+RESULTS:
:
: [0,1,2,3,4]

There are also many other options buried in old docs, such as ~:post org-babel-haskell-formatter(*this*)~

#+begin_src haskell :post org-babel-haskell-formatter(*this*)
x = [0..4]
x
#+end_src

#+RESULTS:
: (0 1 2 3 4)

** multi-line

Multi-line code blocks need ~:{~ ~:}~ wrappers.

#+begin_src haskell
:{
t1 :: Bool -> Int
t1 z = case z of
        True -> 1
        False -> 0
:}

t1 True
#+end_src

#+RESULTS:
: > 1

#+begin_src haskell :results output
:{
t1 :: Bool -> Int
t1 z = case z of
        True -> 1
        False -> 0
:}

t1 True
#+end_src

#+RESULTS:
:
: > 1

Note that ~:set +m~ doesn't work and the process will hang.

#+begin_src haskell
:set +m
f :: Bool -> Int
f z = case z of
        True -> [0..4]
        False -> [1..9]
#+end_src

#+begin_src haskell
f False
#+end_src

#+RESULTS:
| 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |

** org-babel-script-escape bug

** formatter

Post-computation formatting is possible, but be prepared for documentation archeology.

#+RESULTS:
: (0 1 2 3 4)

#+name: org-babel-haskell-formatter
    #+begin_src emacs-lisp :var strr="" :exports code
      (format "%s"
              (replace-regexp-in-string
               (rx line-start
                   (+ (| alphanumeric blank "." "|" ">")))
               "" (format "%s" strr)))
    #+end_src

    #+RESULTS: org-babel-haskell-formatter

#+begin_src haskell :post org-babel-haskell-formatter(*this*)
x = [0..4]
x
#+end_src

** embedding inline svg

Example of embedding svg and other image output with ~:file line.svg :results output graphics file~

#+begin_src haskell :file line.svg :results output graphics file :exports results
x = 1
#+end_src

#+RESULTS:
[[file:line.svg]]

** executable project

This is required if you are working with a project, and compiling a library doesn't suit. (Library is the default in emacs)

#+begin_src elisp
(setq haskell-process-args-cabal-repl '("poker-fold:exe:poker-fold-speed"))
#+end_src
